{
    "summary": "This Flask server code sets up a screen casting system that takes screenshots at a specified framerate, adjusting sleep time to maintain consistency. The images are stored and accessible via a Flask route with timestamps. It defines API routes for mouse and keyboard commands, uses lazero_mouse module, handles POST requests for key presses, and runs on a specified host and port.",
    "details": [
        {
            "comment": "This code sets up a Flask server for screen casting or handling requests. It imports necessary libraries, defines a homepage function, and begins the process of taking screenshots at a specified framerate. The sleep time is dynamically changed to maintain the desired framerate, and checks the screen every 5 shots to adjust the sleep time as needed.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_lazero_remote_control.py\":0-37",
            "content": "# websocket screen cast?\n# or just some normal requests.\nfrom flask import Flask, request, Response\n#homepage = \"\"\ndef homepage():\n    with open(\"deprecated_index.html\", \"r\") as f:\n        return f.read()\nimport pyautogui\nimport mss\nimport threading\nimport traceback\n# the monitor is just the screen position.\n# shall one set the refresh rate manually.\nfrom PIL import Image\nfrom io import BytesIO\nimport time\nframerate=10\ncurrent_shot = None\nimport copy\ndef takeshots():\n    global current_shot, framerate\n    standard_sleep_time = 1/framerate\n    sleep_time = standard_sleep_time\n    this_time, current_time = 0, 0\n    check_loop = 5\n    check_base = 0\n    # you shall dynamically change the sleep time.\n    try:\n        with mss.mss() as mss_instance:\n            monitor = mss_instance.monitors[1]\n            while True:\n#                check this shit every 5 shots.\n                if check_base % check_loop == 0:\n                    this_time = time.time()\n                shot = mss_instance.grab(monitor)\n                img = Image.frombytes(\"RGB\", shot.size, shot.bgra, \"raw\", \"BGRX\")"
        },
        {
            "comment": "This code takes a screenshot using PyAutoGUI, saves it as JPEG, and stores the image bytes in `image_jpg_bytes`. It checks the base variable modulo check_loop to determine if it should sleep for a specified amount of time. If not, it calculates the difference between current and previous time stamps and adjusts the sleep time accordingly. The code creates a Flask route that returns the stored image in JPEG format with a given timestamp. The code also handles any exceptions that might occur using traceback.print_exc(). Finally, it starts a thread to continuously take screenshots and makes the images accessible via a Flask route.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_lazero_remote_control.py\":38-66",
            "content": "                with BytesIO() as f:\n                    img.save(f,format=\"JPEG\")\n                    image_jpg_bytes = f.getvalue()\n                    current_shot = copy.copy(image_jpg_bytes)\n#                print(shot,type(shot),dir(shot))\n                if check_base % check_loop == 0:\n                    current_time = time.time()\n                    time_delta = current_time - this_time\n                    if time_delta > standard_sleep_time:\n                        sleep_time = 0\n                    else:\n                        sleep_time = standard_sleep_time - time_delta\n                time.sleep(sleep_time)\n                check_base += 1\n                check_base %= check_loop\n    except:\n        traceback.print_exc()\n        time.sleep(1)\nscreenshot_thread = threading.Thread(target=takeshots,daemon=True)\nscreenshot_thread.start()\napp = Flask(__name__)\n@app.route(\"/screenshot/<timestamp>.jpg\")\ndef screenshot(timestamp):\n    global current_shot\n    shot = current_shot\n    return Response(shot,mimetype=\"image/jpeg\")"
        },
        {
            "comment": "This code defines an API route for mouse-related commands and handles various requests, such as click, double-click, and mouse movement. It uses the lazero_mouse module to execute these commands and returns a response indicating whether the request was accepted or if there was an error processing it.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_lazero_remote_control.py\":68-98",
            "content": "import lazero_mouse\nimport lazero_keyboard\n@app.route(\"/mouse\",methods=[\"POST\"])\ndef mouse():\n    body = request.get_json()\n    try:\n        _type = body[\"type\"]\n        if _type == \"reset\":\n            lazero_mouse.reset_mouse()\n        elif _type == \"click\":\n            button = body[\"button\"]\n            lazero_mouse.click(button=button)\n        elif _type == \"doubleClick\":\n            button = body[\"button\"]\n            lazero_mouse.doubleClick(button=button)\n        elif _type == \"mouseDown\":\n            lazero_mouse.mouseDown()\n        elif _type == \"mouseUp\":\n            lazero_mouse.mouseUp()\n        elif _type == \"mouseMove\":\n            deltaX = body[\"deltaX\"]\n            deltaY = body[\"deltaY\"]\n            lazero_mouse.mouseMove(deltaX,deltaY)\n        else:\n            return \"Unsupported mouse request type: {}\".format(_type)\n    #print(\"mouse request:\",[request.values.get(x) for x in [\"deltaX\",\"deltaY\"]])\n        return \"Mouse Request Accepted.\"\n    except:\n        traceback.print_exc()\n        return \"Error when performing mouse request.\""
        },
        {
            "comment": "This code defines two routes, \"/keyboard\" and \"/\", for a web application. The \"/keyboard\" route handles POST requests to process keyboard commands. It expects a JSON payload with the command type (\"reset\", \"keyDowb\", or \"keyUp\") and the key. The \"/\" route simply returns the homepage content. The code runs on the specified host and port when executed as the main module.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_lazero_remote_control.py\":100-131",
            "content": "@app.route(\"/keyboard\",methods=[\"POST\"])\ndef keyboard():\n    body = request.get_json()\n    print(body)\n    try:\n        _type = body[\"type\"]\n        if _type == \"reset\":\n            lazero_keyboard.reset_keyboard()\n        elif _type == \"keyDowb\":\n            key = body[\"key\"]\n            key = lazero_keyboard.translate(key)\n            lazero_keyboard.keyDown(key)\n        elif _type == \"keyUp\":\n            key = body[\"key\"]\n            key = lazero_keyboard.translate(key)\n            lazero_keyboard.keyUp(key)\n        else:\n            return \"Unsupported keyboard request type: {}\".format(_type)\n    #print(\"keyboard request:\",[request.values.get(x) for x in [\"character\",\"modifier\"]])\n        return \"Keyboard Request Accepted.\"\n    except:\n        traceback.print_exc()\n        return \"Error when performing keyboard request.\"\n@app.route(\"/\")\ndef index():\n    #global homepage\n    return homepage()\nhost, port = \"0.0.0.0\", 14986\nif __name__ == \"__main__\":\n    app.run(host=host,port=port)"
        }
    ]
}