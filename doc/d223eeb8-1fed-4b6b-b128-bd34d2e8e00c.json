{
    "summary": "The code defines a cross-platform function, `terminate`, that terminates a process based on the operating system. It uses taskkill for Windows, spawns 'terminateProcess.sh' script on Linux/Macintosh, and uses SIGKILL if none match.",
    "details": [
        {
            "comment": "The code defines a function `terminate` that takes in a process and optional working directory as parameters. It checks if the current platform is Windows, Macintosh, or Linux using the `process.platform` property. If it's Windows, it attempts to terminate the process using `execFileSync` with specific stdio options (pipe input, pipe output, ignore error).",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_win10_amd64/cognitionService/virtual/processes.js\":0-20",
            "content": "\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.terminate = void 0;\nconst cp = require(\"child_process\");\nconst path_1 = require(\"path\");\nconst isWindows = (process.platform === 'win32');\nconst isMacintosh = (process.platform === 'darwin');\nconst isLinux = (process.platform === 'linux');\nfunction terminate(process, cwd) {\n    if (isWindows) {\n        try {\n            // This we run in Atom execFileSync is available.\n            // Ignore stderr since this is otherwise piped to parent.stderr\n            // which might be already closed.\n            let options = {\n                stdio: ['pipe', 'pipe', 'ignore']\n            };"
        },
        {
            "comment": "This code terminates a process based on the operating system. If running on Windows, it uses taskkill to forcefully kill the process with the specified PID. On Linux or Macintosh, it spawns a shell script 'terminateProcess.sh' to kill the process. If none of these match, it uses SIGKILL to terminate the process. It returns true if successful and false on error.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_win10_amd64/cognitionService/virtual/processes.js\":21-47",
            "content": "            if (cwd) {\n                options.cwd = cwd;\n            }\n            cp.execFileSync('taskkill', ['/T', '/F', '/PID', process.pid.toString()], options);\n            return true;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    else if (isLinux || isMacintosh) {\n        try {\n            var cmd = path_1.join(__dirname, 'terminateProcess.sh');\n            var result = cp.spawnSync(cmd, [process.pid.toString()]);\n            return result.error ? false : true;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    else {\n        process.kill('SIGKILL');\n        return true;\n    }\n}\nexports.terminate = terminate;\n//# sourceMappingURL=processes.js.map"
        }
    ]
}