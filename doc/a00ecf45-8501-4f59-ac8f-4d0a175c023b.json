{
    "summary": "This code creates an HTTP server handling GET and POST requests, writing data to files based on URL. It also sets up a server for POST requests, logging success/error messages and listening on port 5000.",
    "details": [
        {
            "comment": "Creates an HTTP server to handle GET and POST requests, writes received data to files using a recursive file creation function.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/eventService/chrome_receive.js\":0-30",
            "content": "var http = require('http');\nconst fs = require(\"fs\");\nconst chrome_html = \"/chrome_html\";\nconst chrome_monitor = \"/chrome_monitor\";\nvar monotonic_html=0;\nvar monotonic_monitor=0;\n//logger=require('html-differ/lib/logger')\n//this is too slow.\n//you can use some other abstract syntax. such as monotonic+timestamp.\nconst writeFileRecursive = function(path, buffer, callback){\n    let lastPath = path.substring(0, path.lastIndexOf(\"/\"));\n    fs.mkdir(lastPath, {recursive: true}, (err) => {\n        if (err) return callback(err);\n        fs.writeFile(path, buffer, function(err){\n            if (err) return callback(err);\n            return callback(null);\n        });\n    });\n}\nvar prev=null;\n    var server = http.createServer ( function(request,response){\n    response.writeHead(200,{\"Content-Type\":\"text/plain\"});\n    if(request.method == \"GET\")\n        {\n            response.end(\"received GET request.\")\n        }\n    else if(request.method == \"POST\")\n        {//console.log(request.data);\n\t\tvar body=[]\n\t\trequest.on('data', function(data) {"
        },
        {
            "comment": "The code reads the request data and concatenates it into a buffer. If the request URL is for \"chrome_html\", it increments the monotonic count, converts the data to UTF-8 string, writes it to a file with a timestamped name, and logs a success message or an error message if failed. Similarly, if the request URL is for \"chrome_monitor\", it increments the monotonic count, saves the concatenated data as a JSON file, and logs the success/error message accordingly. The code also sends a 200 response with the content type of 'text/html'.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/eventService/chrome_receive.js\":31-48",
            "content": "      body.push(data)\n      //console.log('Partial body: ' , data)\n    })\n    request.on('end', function() {\n\t    var concatBody=Buffer.concat(body)\n\t    if (request.url == chrome_html){\n\t\t    monotonic_html+=1;\n\t    var next=concatBody.toString('utf-8')\n\t    writeFileRecursive(\"./chrome_html/\"+Date.now()+\"-\"+monotonic_html+\".html\",next,error => {if (error) return console.log(\"error to write file.\\n\"+error.message); console.log(\"saved successfully\");});}\n\t    else if (request.url == chrome_monitor){\nmonotonic_monitor+=1;\n\t    var next=concatBody.toString('utf-8')\n\t    writeFileRecursive(\"./chrome_monitor/\"+Date.now()+\"-\"+monotonic_monitor+\".json\",next,error => {if (error) return console.log(\"error to write file.\\n\"+error.message); console.log(\"saved successfully\");});}\n\t    // why are you doing it?\n\t    // we are going to save the file, in case that you are dumb.\n      console.log('Body From '+request.url+'\\nLength:',concatBody.length)\n      response.writeHead(200, {'Content-Type': 'text/html'})\n\t    // this is not."
        },
        {
            "comment": "This code sets up a server to handle POST requests, returning \"post received\" if the request is defined and \"Undefined request .\" otherwise. The server listens on port 5000 and logs a message upon successful startup. The socket port might need modification to avoid conflicts with other ports in use.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/eventService/chrome_receive.js\":49-60",
            "content": "      response.end('post received')\n    })\n        }\n    else\n        {\n            response.end(\"Undefined request .\");\n        }\n});\n//arbitrary path.\nserver.listen(5000);\nconsole.log(\"Server running on port 5000\");\n// the socket port might need some change. do not use the same port?"
        }
    ]
}