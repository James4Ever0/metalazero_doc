{
    "summary": "The code provides URL interception, WebSocket debugging, and asynchronous communication between browser extension and server with error handling and timeout. It uses Rectangle class for stack functionality, manages requests, handles APIs, and pushes data to pagestack or sends console results using sockets.",
    "details": [
        {
            "comment": "This code intercepts all URLs, filters selected ones, and logs messages. It sets up a WebSocket connection for debugging purposes. The code also modifies the `chrome` object to remove the `debugger` property as it's not supported in Kiwi. A function is defined for processing commands, and an inspector function is provided for displaying objects with specified depth levels.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":0-38",
            "content": "//intercept all urls. get the result back,\n//only keep a selected few.\nconsole.log(\"LAZERO PLUGIN\\n    -\\n   |               ___  __  __\\n  / \\\\  |    /|  /  ___ |   |  |\\n \\\\  _\\\\ |__ / | /__ ___ |   |__|\\n\\nTo make everything\\nexecutable, analyzable, controllable.\");\ndelete chrome.debugger;\nconst consoleurl = \"ws://100.115.92.2:4999/chrome_console\";\nvar socket = new WebSocket(consoleurl);\nconst reconnect = 2000;\nconst background = \"background: \";\nconst tab_id = \"tab_id: \";\nconst currentid = \"background\";\nconst evaltimeout = 1000;\n//kiwi does not have chrome.debugger.\n//const command_prefix = \"let chrome = Object.create(this.chrome);chrome.debugger=null;\"\nconst command_prefix = \"let eval = null;\"\nfunction command_processor (command){return command_prefix+command;}\nfunction xinspect(obj, maxLevels, level)\n{\n\tvar str = '', type, msg;\n\t// Start Input Validations\n\t// Don't touch, we start iterating at level zero\n\tif(level == null)  level = 0;\n\t// At least you want to show the first level\n\tif(maxLevels == null) maxLevels = 1;"
        },
        {
            "comment": "This code performs error checking and iterates over each property of an object. It checks if the levels number is valid, ensures the object is not null, and handles nested objects within the required maximum levels. If a property or level validation fails, it returns an error message.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":40-82",
            "content": "\tif(maxLevels < 1)     \n\t\treturn '<font color=\"red\">Error: Levels number must be > 0</font>';\n\t// We start with a non null object\n\tif(obj == null)\n\t\treturn '<font color=\"red\">Error: Object <b>NULL</b></font>';\n\t// End Input Validations\n\t// Each Iteration must be indented\n\tstr += '<ul>';\n\t// Start iterations for all objects in obj\n\tfor(property in obj)\n\t{\n\t\ttry\n\t\t{\n\t\t\t// Show \"property\" and \"type property\"\n\t\t\ttype =  typeof(obj[property]);\n\t\t\tstr += '<li>(' + type + ') ' + property + \n\t\t\t\t( (obj[property]==null)?(': <b>null</b>'):('')) + '</li>';\n\t\t\t// We keep iterating if this property is an Object, non null\n\t\t\t// and we are inside the required number of levels\n\t\t\tif((type == 'object') && (obj[property] != null) && (level+1 < maxLevels))\n\t\t\t\tstr += inspect(obj[property], maxLevels, level+1);\n\t\t}\n\t\tcatch(err)\n\t\t{\n\t\t\t// Is there some properties in obj we can't access? Print it red.\n\t\t\tif(typeof(err) == 'string') msg = err;\n\t\t\telse if(err.message)        msg = err.message;\n\t\t\telse if(err.description)    msg = err.description;"
        },
        {
            "comment": "Function: `timeout` - Creates a new Promise that resolves after the specified time in milliseconds.\nFunction: `sleep` - Creates a new Promise that resolves after the specified time in milliseconds using setTimeout function.\nFunction: `seval` - Evaluates the provided string and returns the result as a JSON stringified object, then sends it to the socket.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":84-153",
            "content": "\t\t\telse                        msg = 'Unknown';\n\t\t\tstr += '<li><font color=\"red\">(Error) ' + property + ': ' + msg +'</font></li>';\n\t\t}\n\t}\n\t// Close indent\n\tstr += '</ul>';\n\treturn str;\n}\nfunction sleep(ms) {\n\treturn new Promise(resolve=>setTimeout(resolve, ms));\n}\nvar tab_id_list = new Array();\n// do we really have to maintain it?\n// just do it. show if it is possible. when on error.\nfunction timeout(ms){\n\t// this one is too damn fast.\n\treturn new Promise((resolve,reject) => {\n\t\tsetTimeout(function(){\n\t\t\tresolve(true);\n\t\t},ms);\n\t});\n}\nfunction seval(str){\n\treturn new Promise((resolve, reject) => {\n\t\t////console.log(\"eval started.\",str);\n\t\ttry{\n\t\t\tlet result = JSON.stringify(eval(command_processor(str)));\n\t\t\t////console.log(\"eval ended.\",str);\n\t\t\t//console.log(\"eval result:\",result);\n\t\t\t// same function here.\n\t\t\t// will this get the result in time?\n\t\t\t// how about let's just send it?\n\t\t\ttry{\n\t\t\t\tsocket.send(JSON.stringify({\n\t\t\t\t\ttab_id:currentid,result:result}));\n\t\t\t}\n\t\t\tcatch (e){\n\t\t\t\t//console.log(\"console send failed.\");"
        },
        {
            "comment": "This code handles communication between a browser extension and server, logging information about tabs, sending errors back to the server, and using Promises for asynchronous operations. It also includes error handling and timeout mechanisms.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":155-231",
            "content": "\t\t\t\t//console.log(e);\n\t\t\t}\n\t\t}\n\t\tcatch (e){\n\t\t\tsocket.send(JSON.stringify({\n\t\t\t\ttab_id:currentid,error:e.toString()}));\n\t\t}\n\t\t// will have eval error.\n\t\t// not receiving shit.\n\t\t//\t//console.log(\"about to resolve\");\n\t\tresolve(true);\n\t});\n}\nfunction reval(str){\n\tPromise.race([seval(str),timeout(evaltimeout)]).then((v) =>{\n\t\t//console.log(\"eval in time\");\n\t\t//console.log(v);\n\t}).catch((e) => {\n\t\t// check error first?\n\t\t//console.log(e);\n\t\t//console.log(\"eval out of time.\");\n\t})\n}\n// get the hint here.\nfunction logTabs(tabs) {\n\tvar logs = \"\";\n\t// in case it is not iterable.\n\ttry{\n\t\tfor (var tab of tabs) {\n\t\t\t// tab.url requires the `tabs` permission\n\t\t\tlogs +=(JSON.stringify({\n\t\t\t\tid: tab.id,\n\t\t\t\tstatus:tab.status,\n\t\t\t\ttitle:tab.title,\n\t\t\t\turl:tab.url,\n\t\t\t\tincognito:tab.incognito,\n\t\t\t\tmetrics:{\n\t\t\t\t\theight:tab.height,width:tab.width}})+\"\\n\");\n\t\t\t//console.log(tab);\n\t\t\t// all of them? only id is needed.\n\t\t\t// send this information back to server.\n\t\t}\n\t}\n\tcatch(e){\n\t\t//console.log(e);\n\t}\n\ttry{\n\t\tsocket.send(logs);\n\t}catch (e){\n\t\t//console.log(e);"
        },
        {
            "comment": "This code handles communication with tabs and sends information to the server using socket connection. It includes functions for querying, sending, and checking tabs, as well as dumping and querying cookies. The code uses different APIs for tabs and cookies operations and handles errors.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":233-316",
            "content": "\t};\n}\nfunction checkTabs(tabs) {\n\tvar tbs = new Array();\n\ttry{\n\t\tfor (var tab of tabs) {\n\t\t\ttbs.push(tab.id);\n\t\t}\n\t}catch (e)\n\t{\n\t\t//console.log(e);\n\t}\n\ttab_id_list = tbs;\n}\nfunction onError(error) {\n\t//console.log(`Error: ${error}`);\n}\nfunction get_tabs() {\n\tchrome.tabs.query({\n},logTabs);\n\t// different api.\n}\nfunction check_tabs() {\n\tchrome.tabs.query({\n},checkTabs);\n\t// different api.\n}\n//establish connection with tabs.\nsocket.onopen = function(e) {\n\t//console.log(\"[open] Connection established\");\n\t//console.log(\"Sending to server\");\n\tsocket.send(\"Welcome to Lazero Chrome Console.\");\n}\n;\nfunction dump_cookies(){\nchrome.cookies.getAll({\n},(cookies)=>{\nsocket.send(JSON.stringify({\nquery:{\n},cookies:cookies}));\n})}\nfunction query_cookies(queryString){\ntry{\n var query = JSON.parse(queryString);\n//\tconsole.log(query);\nchrome.cookies.getAll(query,(cookies) =>{\nsocket.send(JSON.stringify({\nquery:query,cookies:cookies}));\n});\n}catch (e){\nsocket.send(JSON.stringify({\nqueryString:queryString,error:e.toString()}));\n}}\n//chrome.tabs.query\n//chrome.tabs.sendMessage"
        },
        {
            "comment": "This code handles messages received from the server, and based on the message content, it executes different functions. If the message starts with \"show_tabs\", it sends a JSON string of tab IDs. If it starts with \"show_tabs_detail\", it calls the get_tabs function. For \"dump_cookies\", it calls dump_cookies function. If the message starts with \"query_cookies:\", it extracts and passes the query to query_cookies function. Otherwise, it executes the content of the received message using reval function.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":317-364",
            "content": "socket.onmessage = function(event) {\n\t//console.log(`[message] Data received from server: ${event.data}`);\n\t// that is string.\n\t//console.log(\"printing type of data:\",typeof(event.data));\n\tif (typeof(event.data) == \"string\"){\n\t\tlet command = event.data;\n\t\t// just check it.\n\t\t// use the same logic here.\n\t\tif (command.startsWith(background)) {\n\t\t\tlet substring = command.substring(background.length, command.length);\n\t\t\t// evaluate the shit?\n\t\t\tif (substring == \"show_tabs\"){\nsocket.send(JSON.stringify(tab_id_list));\n}\n\t\t\telse if (substring == \"show_tabs_detail\"){\nget_tabs();\n}\n\t\t\telse if (substring == \"dump_cookies\"){\ndump_cookies();\n}\n\t\t\telse if (substring.startsWith(\"query_cookies:\")){\n\t\t\t\tquery_cookies(substring.substring(\"query_cookies:\".length,substring.length));\n\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treval(substring);\n}\n\t\t} else if (command.startsWith(tab_id)) {\n\t\t\tlet substring = command.substring(tab_id.length, command.length);\n\t\t\tlet tab_id_real = substring.match(/^\\d*/i);\n\t\t\tif (tab_id_real == null){\n\t\t\t\tsocket.send(\"Syntax: tab_id: <tab_id>:<javascript>\\n\\nAvaliable tab_ids: \"+JSON.stringify(tab_id_list));"
        },
        {
            "comment": "The code checks if the tab_id is valid, then retrieves the corresponding tab object using chrome.tabs.get() and sends a message with the command data to the tab using chrome.tabs.sendMessage(). If the tab does not exist, it informs about the missing tab and available tab_ids.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":366-410",
            "content": "\t\t\t}else{\n\t\t\t\tlet tidreal = parseInt(tab_id_real[0]);\n\t\t\t\ttry{\n\t\t\t\t\tlet consoledata = substring.substring(tab_id_real[0].length+1,substring.length)\n\t\t\t\t\t//console.log(`communicating with tab: ${tidreal}, ${JSON.stringify(consoledata)}`);\n\t\t\t\t\t// this won't fail.\n\t\t\t\t\t//\t\t\t\t\tcheck_tabs();\n\t\t\t\t\t// will you query for it?\n\t\t\t\t\tchrome.tabs.get(tidreal,(tab) => {\n\t\t\t\t\t\tif (typeof(tab) == \"object\"){\n\t\t\t\t\t\t\tchrome.tabs.sendMessage(tidreal,\n\t\t\t\t\t\t\t\t{\ndata:consoledata,\n\t\t\t\t\t\t\t\t\ttab_id:tidreal,action:\"console_command\"});\n}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tsocket.send(`tab ${\n\t\t\t\t\t\t\t\ttidreal} does not exist.\\nAvaliable tab_ids: ${\n\t\t\t\t\t\t\t\t\tJSON.stringify(tab_id_list)}`);\n}\n\t\t\t\t\t});\n\t\t\t\t\t//does the tab exists?\n\t\t\t\t\t//need we maintain a list for it?\n\t\t\t\t}\n\t\t\t\tcatch (e){\n\t\t\t\t\t//console.log(`sending command to tab ${tidreal} failed.`);\n\t\t\t\t\t//console.log(e);\n\t\t\t\t\tsocket.send(\"Avaliable tab_ids: \"+JSON.stringify(tab_id_list));\n\t\t\t\t}\n\t\t\t\t// examine the format first?\n\t\t\t\t// we can definitely generate the tab_id according to window_index and index.\n\t\t\t\tlet tabcommand = substring.substring(tab_id.length, substring.length);"
        },
        {
            "comment": "This code establishes a WebSocket connection for communication between client and server. It sends specific commands to the server, provides hints on object inspection, and handles connection errors or disconnections by automatically reconnecting after some delay.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":413-476",
            "content": "\t\t\t}\n\t\t}else{\n\t\t\t// will send help.\n\t\t\tsocket.send(`Command should starts with \"${background}show_tabs|show_tabs_detail|dump_cookies|query_cookies:<query_json>|<javascript>\" or \"${tab_id}<tab_id>:<javascript>\". \\n\\nHint: to inspect objects, use \"xinspect(object,recursionDepth)\".\\nHint: \"globalThis\" or \"this\" might be helpful.\\nHint: JSON keys must be quoted.`);\n};\n}\n};\n// first let's check the input.\nsocket.onclose = function(event) {\n\t//console.log(`trying reconnect in ${reconnect}ms`);\n\tsetTimeout((function() {\n\t\tvar ws2 = new WebSocket(consoleurl);\n\t\tws2.onmessage = socket.onmessage;\n\t\tws2.onerror = socket.onerror;\n\t\tws2.onclose = socket.onclose;\n\t\tsocket = ws2;\n\t}\n\t).bind(this), reconnect);\n\tif (event.wasClean) {\n\t\t//console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);\n\t} else {\n\t\t// e.g. server process killed or network down\n\t\t// event.code is usually 1006 in this case\n\t\t//console.log('[close] Connection died');\n\t}\n}\n;\nsocket.onerror = function(error) {\n\t// will try again."
        },
        {
            "comment": "The code defines a Rectangle class with stack functionality, allowing up to 500 items in urlstack and 50 items in pagestack. It also initializes isrunning and isrealrunning flags as false.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":477-625",
            "content": "\t// no option to catch that error?\n\t//console.log(`[error] ${error.message}`);\n}\n;\nfunction copyarray(array) {\n\tlet arr = new Array();\n\tfor (var x in array) {\n\t\tarr.push(array[x])\n\t}\n\treturn arr;\n}\nclass Rectangle {\n\tconstructor(height) {\n\t\tthis.height = height;\n\t\tthis.width = new Array();\n\t}\n\tpush(a) {\n\t\tthis.width.push(a);\n\t\tif (this.width.length > this.height) {\n\t\t\tthis.width.shift();\n\t\t}\n\t}\n\tpeekall() {\n\t\tif (this.width.length > 0) {\n\t\t\treturn copyarray(this.width);\n\t\t}\n\t\treturn null;\n\t}\n\tpopall() {\n\t\tif (this.width.length > 0) {\n\t\t\tlet arr = copyarray(this.width);\n\t\t\tthis.width = new Array();\n\t\t\treturn arr;\n\t\t}\n\t\treturn null;\n\t}\n\tpop() {\n\t\tif (this.width.length > 0) {\n\t\t\ttry {\n\t\t\t\treturn this.width.shift();\n\t\t\t} catch (e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tpeek() {\n\t\tif (this.width.length > 0) {\n\t\t\ttry {\n\t\t\t\treturn this.width[0];\n\t\t\t} catch (e) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\nvar urlstack = new Rectangle(500);\nvar pagestack = new Rectangle(50);\nvar isrunning = false;\nvar isrealrunning = false;"
        },
        {
            "comment": "The code initiates an XMLHttpRequest to send data stored in the urlstack to a server at \"http://localhost:5000/chrome_monitor\". It checks if the realURL is not running, peeks all data from urlstack, and sends it as a POST request. If successful, it pops the data from urlstack and calls itself again to continuously send data. If there's an error or timeout, it updates corresponding variables and stops sending.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":628-702",
            "content": "var lastsuccess = false;\nvar isurlrunning = false;\nvar isrealurlrunning = false;\nvar lasturlsuccess = false;\nconst requesturl = \"http://localhost:5000/chrome_html\";\nconst monitorurl = \"http://localhost:5000/chrome_monitor\";\nfunction checksendurl() {\n\ttry {\n\t\tif (!isrealurlrunning) {\n\t\t\tlet data = urlstack.peekall();\n\t\t\tif (data != null) {\n\t\t\t\tisrealurlrunning = true;\n\t\t\t\tvar xhttp = new XMLHttpRequest();\n\t\t\t\tvar method = 'POST';\n\t\t\t\txhttp.onload = function() {\n\t\t\t\t\t//console.log(xhttp.responseText);\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.onerror = function() {\n\t\t\t\t\tlasturlsuccess = false;\n\t\t\t\t\tisrealurlrunning = false;\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.onreadystatechange = function() {\n\t\t\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t\t\t\t\t\turlstack.popall();\n\t\t\t\t\t\tlasturlsuccess = true;\n\t\t\t\t\t\t//console.log(\"success! \" + this.responseText);\n\t\t\t\t\t\tisrealurlrunning = false;\n\t\t\t\t\t\tchecksendurl();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.open(method, monitorurl, true);\n\t\t\t\txhttp.timeout = 1000;\n\t\t\t\tif (method == 'POST') {\n\t\t\t\t\txhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');"
        },
        {
            "comment": "This code checks if a page is currently being loaded, retrieves the data from the stack, and sends it via a POST request to a specified URL. If there's an error during posting, it logs the error message. The function also handles response status and continues to check for new pages, popping the processed data from the stack if successful.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":704-780",
            "content": "\t\t\t\t}\n\t\t\t\txhttp.send(JSON.stringify(data));\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\t//console.log(\"posting error:\\n\" + e.toString());\n\t}\n}\nfunction checksend() {\n\ttry {\n\t\tif (!isrealrunning) {\n\t\t\tlet data = pagestack.peek();\n\t\t\tif (data != null) {\n\t\t\t\tisrealrunning = true;\n\t\t\t\tvar xhttp = new XMLHttpRequest();\n\t\t\t\tvar method = 'POST';\n\t\t\t\txhttp.onload = function() {\n\t\t\t\t\t//console.log(xhttp.responseText);\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.onerror = function() {\n\t\t\t\t\tlastsuccess = false;\n\t\t\t\t\tisrealrunning = false;\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.onreadystatechange = function() {\n\t\t\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t\t\t\t\t\tpagestack.pop();\n\t\t\t\t\t\tlastsuccess = true;\n\t\t\t\t\t\t//console.log(\"success! \" + this.responseText);\n\t\t\t\t\t\tisrealrunning = false;\n\t\t\t\t\t\tchecksend();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t;\n\t\t\t\txhttp.open(method, requesturl, true);\n\t\t\t\txhttp.timeout = 1000;\n\t\t\t\tif (method == 'POST') {\n\t\t\t\t\txhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\t\t\t\t}\n\t\t\t\txhttp.send(data);\n\t\t\t}\n\t\t}\n\t} catch (e) {\n\t\t//console.log(\"posting error:\\n\" + e.toString());"
        },
        {
            "comment": "This code monitors URLs and checks for requests, storing relevant data in a stack when necessary. It also periodically checks for pending requests, and handles specific URLs (requesturl, monitorurl, consoleurl). The code includes functions for handling these events and uses chrome APIs to listen for requests and messages.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":782-864",
            "content": "\t}\n}\nasync function asf() {\n\twhile (true) {\n\t\tawait sleep(5000);\n\t\t//console.log(\"about to check pending requests.\");\n\t\t// set a global variable on running.\n\t\tif (!isrunning) {\n\t\t\tisrunning = true;\n\t\t\tchecksend();\n\t\t\tisrunning = false;\n\t\t}\n\t\t// this one will dumpall.\n\t\tif (!isurlrunning) {\n\t\t\tisurlrunning = true;\n\t\t\tchecksendurl();\n\t\t\tisurlrunning = false;\n\t\t}\n\t\tcheck_tabs();\n\t\t//var tb=chrome.tabs;\n\t\t////console.log(tb);\n\t}\n}\nasf();\nfunction logURL(requestDetails) {\n\tlet rurl = requestDetails.url;\n\t// nothing interesting.\n\t//\tconsole.dir(requestDetails);\n\t// really have to do this?\n\t// just filter out the unwanted.\n\t// //console.log(\"Loading: \" +rurl);\n\tif (rurl==requesturl){\n}\n\telse if (rurl == monitorurl){\n}\n\telse if (rurl == consoleurl){\n}\n\telse{\n\t\turlstack.push(JSON.stringify(requestDetails));\n\t}\n}\nchrome.webRequest.onBeforeRequest.addListener(logURL, {\n\turls: [\"<all_urls>\"]\n});\n// will you receive?\nchrome.runtime.onMessage.addListener(function(request, sender, callback) {\n\t//need to log the sender.\n\t//console.log(\"sender\", sender);"
        },
        {
            "comment": "This code handles two types of requests: \"xhttp\" and \"console_output\". If the request is an \"xhttp\", it pushes the data to pagestack. For \"console_output\", it tries sending the console result using socket, returning true if successful or false on failure.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/background.js\":866-905",
            "content": "\t//console.log(\"page request url:\",request.url);\n\tif (request.action == \"xhttp\" && request.url == requesturl) {\n\t\tpagestack.push(request.data);\n\t\t//console.log(\"page data received.\");\n\t\treturn true;\n\t\t// prevents the callback from being called too early on return\n\t} else if (request.action == \"console_output\") {\n\t\ttry {\n\t\t\t//console.log(\"trying to send console result.\",request.data);\n\t\t\tsocket.send(request.data);\n\t\t\treturn true;\n\t\t\t// needs to encode.\n\t\t} catch (e) {\n\t\t\t//console.log(\"send console failed.\");\n\t\t\treturn false;\n\t\t}\n\t}\n});\n//use eval or geval?"
        }
    ]
}