{
    "summary": "This Python utility code is for libseccomp test suite, containing functions to handle signals and parse command line arguments using argparse, os, signal, seccomp modules. The code includes a function with three utilities: UtilGetOpt(), filter_output(), and install_trap().",
    "details": [
        {
            "comment": "This code is Python utility code for the libseccomp test suite, including functions to handle signals and parse command line arguments. It uses argparse for argument parsing, os and signal modules for handling signals, and seccomp module for implementing libseccomp functionality.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/virtualService/tools/sandserv/util.py\":0-36",
            "content": "#\n# Seccomp Library utility code for tests\n#\n# Copyright (c) 2012 Red Hat <pmoore@redhat.com>\n# Author: Paul Moore <paul@paul-moore.com>\n#\n#\n# This library is free software; you can redistribute it and/or modify it\n# under the terms of version 2.1 of the GNU Lesser General Public License as\n# published by the Free Software Foundation.\n#\n# This library is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n# for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this library; if not, see <http://www.gnu.org/licenses>.\n#\n\"\"\" Python utility code for the libseccomp test suite \"\"\"\nimport argparse\nimport os\nimport sys\nimport signal\nfrom seccomp import *\ndef trap_handler(signum, frame):\n    \"\"\" SIGSYS signal handler, internal use only\n    \"\"\"\n    os._exit(161)\ndef get_opt():\n    \"\"\" Parse the arguments passed to main"
        },
        {
            "comment": "Code chunk is a part of a utility function that parses command line arguments, handles signal handlers, and formats the output based on the arguments. The utility function util.py contains three functions: UtilGetOpt(), filter_output() and install_trap(). The first function, UtilGetOpt(), parses arguments passed through command line using argparse module in Python. The second function, filter_output(), exports the SyscallFilter object to stdout in either BPF or PFC format depending on the test's command line arguments. The third function, install_trap(), handles TRAP action signal handler.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/virtualService/tools/sandserv/util.py\":38-75",
            "content": "    Description:\n    Parse the arguments passed to the test from the command line.  Returns\n    a parsed argparse object.\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-b\", \"--bpf\", action=\"store_true\")\n    parser.add_argument(\"-p\", \"--pfc\", action=\"store_true\")\n    return parser.parse_args()\ndef filter_output(args, ctx):\n    \"\"\" Output the filter in either BPF or PFC\n    Arguments:\n    args - an argparse object from UtilGetOpt()\n    ctx - a seccomp SyscallFilter object\n    Description:\n    Output the SyscallFilter to stdout in either BPF or PFC format depending\n    on the test's command line arguments.\n    \"\"\"\n    if (args.bpf):\n        ctx.export_bpf(sys.stdout)\n    else:\n        ctx.export_pfc(sys.stdout)\ndef install_trap():\n    \"\"\" Install a TRAP action signal handler\n    Description:\n    Install the TRAP action signal handler.\n    \"\"\"\n    signal.signal(signal.SIGSYS, trap_handler)\ndef parse_action(action):\n    \"\"\" Parse a filter action string into an action value\n    Arguments:\n    action - the action string"
        },
        {
            "comment": "Code snippet is a Python function that parses seccomp action strings into their associated integer values. It also includes another function to write a string to a specified file.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/virtualService/tools/sandserv/util.py\":77-108",
            "content": "    Description:\n    Parse a seccomp action string into the associated integer value.\n    \"\"\"\n    if action == \"KILL\":\n        return KILL\n    elif action == \"TRAP\":\n        return TRAP\n    elif action == \"ERRNO\":\n        return ERRNO(163)\n    elif action == \"TRACE\":\n        raise RuntimeError(\"the TRACE action is not currently supported\")\n    elif action == \"ALLOW\":\n        return ALLOW\n    raise RuntimeError(\"invalid action string\")\ndef write_file(path):\n    \"\"\" Write a string to a file\n    Arguments:\n    path - the file path\n    Description:\n    Open the specified file, write a string to the file, and close the file.\n    \"\"\"\n    fd = os.open(str(path), os.O_WRONLY|os.O_CREAT)\n    if not os.write(fd, b\"testing\") == len(\"testing\"):\n        raise IOError(\"failed to write the full test string in write_file()\")\n    os.close(fd)\n# kate: syntax python;\n# kate: indent-mode python; space-indent on; indent-width 4; mixedindent off;"
        }
    ]
}