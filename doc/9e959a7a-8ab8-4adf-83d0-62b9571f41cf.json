{
    "summary": "This code sets up a server to handle HTTP requests, writes request data to files recursively, handles a specific URL and logs information. It listens on specified port and confirms when running.",
    "details": [
        {
            "comment": "Server setup with HTTP module, requiring filesystem and fs.js for writing to files, constant variables for file paths, server creation using http.createServer() method, handling GET and POST requests, and using writeFileRecursive function for creating directories and writing to files recursively.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/eventService/emacs_receive.js\":0-31",
            "content": "var http = require('http');\nconst fs = require(\"fs\");\nconst chrome_html = \"/post\";\n//const chrome_monitor = \"/message\";\nvar monotonic_html=0;\nconst port=8786;\n//var monotonic_monitor=0;\n//logger=require('html-differ/lib/logger')\n//this is too slow.\n//you can use some other abstract syntax. such as monotonic+timestamp.\nconst writeFileRecursive = function(path, buffer, callback){\n    let lastPath = path.substring(0, path.lastIndexOf(\"/\"));\n    fs.mkdir(lastPath, {recursive: true}, (err) => {\n        if (err) return callback(err);\n        fs.writeFile(path, buffer, function(err){\n            if (err) return callback(err);\n            return callback(null);\n        });\n    });\n}\nvar prev=null;\n    var server = http.createServer ( function(request,response){\n    response.writeHead(200,{\"Content-Type\":\"text/plain\"});\n    if(request.method == \"GET\")\n        {\n            response.end(\"received GET request.\")\n        }\n    else if(request.method == \"POST\")\n        {//console.log(request.data);\n\t\tvar body=[]\n\t\trequest.on('data', function(data) {"
        },
        {
            "comment": "This code handles incoming HTTP requests, concatenates the request body, and writes it to a file. If the requested URL matches \"chrome_html\", it increments a counter, adds the body content to the file with the current date and counter number, and logs the body length. The server then responds with either 'post received' or 'Undefined request'. Finally, the server listens on a specified port and logs that the server is running.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/eventService/emacs_receive.js\":32-57",
            "content": "      body.push(data)\n      //console.log('Partial body: ' , data)\n    })\n    request.on('end', function() {\n\t    var concatBody=Buffer.concat(body)\n\t    if (request.url == chrome_html){\n\tmonotonic_html+=1;\n\t    var next=concatBody.toString('utf-8')\n\t    writeFileRecursive(\"./emacs_post/\"+Date.now()+\"-\"+monotonic_html+\".log\",next,error => {if (error) return console.log(\"error to write file.\\n\"+error.message); console.log(\"saved successfully\");});}\n\t        // why are you doing it?\n\t    // we are going to save the file, in case that you are dumb.\n      console.log('Body From '+request.url+'\\nLength:',concatBody.length)\n      response.writeHead(200, {'Content-Type': 'text/html'})\n\t    // this is not.\n      response.end('post received')\n    })\n        }\n    else\n        {\n            response.end(\"Undefined request .\");\n        }\n});\n//arbitrary path.\nserver.listen(port);\nconsole.log(\"Server running on port \"+port);\n// the socket port might need some change. do not use the same port?"
        }
    ]
}