{
    "summary": "The code listens for \"checkForWord\" requests, inspects objects recursively, highlights errors in red, creates `dfunc` using `eval` inside a Promise, formats HTML elements, and sends data to the console through Chrome's runtime messaging system. It also sets an event listener on the HTML element, prevents execution if the script is not running, enables CORS extension for sending data to a local server, and listens for messages with 'console_command' action to execute the command using the 'reval' function.",
    "details": [
        {
            "comment": "This code listens for a \"checkForWord\" request and gets the id of the current tab. It logs a message, deletes \"chrome.debugger\", defines a variable for the current id, sets the request URL to \"http://localhost:5000/chrome_html\". The current id comes from the request, and there are input validations for maxLevels and level in the xinspect function.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/content.js\":0-26",
            "content": "// listen for checkForWord request, call getTags which includes callback to sendResponse.\n// get the id of current tab.\nconsole.log(\"LAZERO PLUGIN\\n    -\\n   |               ___  __  __\\n  / \\\\  |    /|  /  ___ |   |  |\\n \\\\  _\\\\ |__ / | /__ ___ |   |__|\\n\\nTo make everything\\nexecutable, analyzable, controllable.\");\ndelete chrome.debugger;\n// may encounter similar situation on firefox for android.\nvar currentid=\"anonymous\";\nconst requesturl = \"http://localhost:5000/chrome_html\";\n// current id may only come from the request.\nconst evaltimeout=1000;\nfunction xinspect(obj, maxLevels, level)\n{\n  var str = '', type, msg;\n    // Start Input Validations\n    // Don't touch, we start iterating at level zero\n    if(level == null)  level = 0;\n    // At least you want to show the first level\n    if(maxLevels == null) maxLevels = 1;\n    if(maxLevels < 1)     \n        return '<font color=\"red\">Error: Levels number must be > 0</font>';\n    // We start with a non null object\n    if(obj == null)\n    return '<font color=\"red\">Error: Object <b>NULL</b></font>';"
        },
        {
            "comment": "This code performs recursive inspection of the 'obj' object, iterating through each property and checking if it is an object. It adds the type and name of each property to a string, highlighting errors in red if any occur during inspection. The function takes a maximum number of levels to inspect and increments the current level with each iteration.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/content.js\":27-55",
            "content": "    // End Input Validations\n    // Each Iteration must be indented\n    str += '<ul>';\n    // Start iterations for all objects in obj\n    for(property in obj)\n    {\n      try\n      {\n          // Show \"property\" and \"type property\"\n          type =  typeof(obj[property]);\n          str += '<li>(' + type + ') ' + property + \n                 ( (obj[property]==null)?(': <b>null</b>'):('')) + '</li>';\n          // We keep iterating if this property is an Object, non null\n          // and we are inside the required number of levels\n          if((type == 'object') && (obj[property] != null) && (level+1 < maxLevels))\n          str += inspect(obj[property], maxLevels, level+1);\n      }\n      catch(err)\n      {\n        // Is there some properties in obj we can't access? Print it red.\n        if(typeof(err) == 'string') msg = err;\n        else if(err.message)        msg = err.message;\n        else if(err.description)    msg = err.description;\n        else                        msg = 'Unknown';\n        str += '<li><font color=\"red\">(Error) ' + property + ': ' + msg +'</font></li>';"
        },
        {
            "comment": "The code defines a function that wraps the `eval` function inside a Promise, allowing for error handling and timeouts. It also includes functions to handle indentation and formatting of HTML elements as well as sending data to the console through Chrome's runtime messaging system.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/content.js\":56-103",
            "content": "      }\n    }\n      // Close indent\n      str += '</ul>';\n    return str;\n}\nfunction timeout(ms){\n\treturn new Promise((resolve,reject) => {\n\t\tsetTimeout(function(){\n\t\t\treject();\n\t\t},ms);\n\t});\n}\nfunction seval(str){\n\treturn new Promise((resolve, reject) => {\ntry{\n\t\tlet result = JSON.stringify(eval(str));\n// same function here.\n// shall you use timestamp?\n\t\t// will this get the result in time?\n\t\t//console.log(\"eval result:\",result);\n\t\tchrome.runtime.sendMessage({\n\t\t\tmethod: \"POST\", action:\"console_output\",data:JSON.stringify({\n\t\t\t\ttab_id:currentid,result:result})},function(responseText){\n\t\t\t\t\t//console.log(\"console eval get response text\",responseText);\n\t\t\t\t});\n}catch (e){\n// also send the result.\n\tchrome.runtime.sendMessage({\n\t\t\tmethod: \"POST\", action:\"console_output\",data:JSON.stringify({\n\t\t\t\ttab_id:currentid,error:e.toString()})},function(responseText){\n\t\t\t\t\t//console.log(\"console eval get response text\",responseText);\n\t\t\t\t});\n}\n\t\tresolve(true);\n\t});\n}\nfunction reval(str){\n\tPromise.race([seval(str),timeout(evaltimeout)]).then((v) =>{"
        },
        {
            "comment": "This code defines a function `dfunc` that repeatedly waits for a specified time interval, retrieves the HTML content of the webpage, and sends it to the background script using `chrome.runtime.sendMessage`. The loop continues for a maximum of `maxseconds`, stopping if the document's ready state is not \"loading\" or if the maximum number of retries has been reached.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/content.js\":104-146",
            "content": "\t\t//console.log(\"eval in time\");\n\t}).catch(() => {\n\t\t//console.log(\"eval out of time.\");\n\t})\n}\nconst maxseconds=5;\nvar isrunning=false;\nfunction sleep(ms) {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n// do not do it twice.\n// it might still be too frequent.\n// but we've got rate control.\nasync function dfunc(ms){\n\tif (!isrunning){\n\t\tlet count=-1;\n\t\twhile(true){\n\t\t\tif (!isrunning){\n\t\t\t\tcount+=1;\n\t\t\t\tisrunning=true;\n\t\t\t}else{\n\t\t\t\tbreak;\n\t\t\t};\n\t\t\tawait sleep(ms);\n\t\t\tisrunning=false;\n\t\t\ttry {\n\t\t\t\tlet htmldump=document.getElementsByTagName(\"html\");\n\t\t\t\tlet htmlcontent=htmldump[0].outerHTML;\n\t\t\t\tif (document.readyState != \"loading\" || count==maxseconds){\n\t\t\t\t\tchrome.runtime.sendMessage({\n\t\t\t\t\t\tmethod: 'POST', action: 'xhttp',url: requesturl, data: htmlcontent}, function(responseText) {\n\t\t\t\t\t\t\t//console.log(\"has response:\\n\"+responseText);\n\t\t\t\t\t\t});\n\t\t\t\t\t//console.log(\"posted data length: \"+htmlcontent.length);\n\t\t\t\t\tif(count!=maxseconds){\n\t\t\t\t\t\tisrunning=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}}}catch (e) {\n\t\t\t\t\t\talert(e);\n\t\t\t\t\t}}}}"
        },
        {
            "comment": "The code sets an event listener on the HTML element, prevents execution if the script is not running, enables CORS extension for sending data to a local server, and listens for messages with 'console_command' action to execute the command using the 'reval' function.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/browser_plugin/lazero_crx_17_kiwi_ip_change/content.js\":147-173",
            "content": "dfunc(500);\ndocument.getElementsByTagName(\"html\")[0].onchange=function (){\n\tif (!isrunning){\n\t\tdfunc(500);\n\t};\n}\n// in order to send to local server, the CORS extension must be enabled.\n// otherwise, it will be literally impossible.\n// also pose danger to the whole shit.\nchrome.runtime.onMessage.addListener(\n\tfunction (request, sender, callback) {\n\t\t//console.log(\"sender\",sender);\n\t\t//check the api.\n\t\tif (request.action === 'console_command') {\n//console.log(\"checking command data:\");\n//console.log(request.data);\ncurrentid = request.tab_id;\n// will then start the command.\nreval(request.data);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n);"
        }
    ]
}