{
    "summary": "This code establishes VSCode IDE connection with a language server, sets up communication channels, defines request types and initializes text documents, all using child processes.",
    "details": [
        {
            "comment": "This code sets up a connection between the VSCode IDE and a language server using child processes. It spawns a bash-language-server process and handles its stdout, stderr output while communicating with it through MessageReader and MessageWriter from vscode-languageserver-protocol/node library.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/cognitionService/virtual/vscode_ipc2.js\":0-23",
            "content": "const node_1 = require(\"vscode-languageserver-protocol/node\")\nconst process = require(\"./processes\") \nconst cp = require(\"child_process\")\nfunction dir(a) {console.dir(a)}\nfunction log(a) {console.log(a)}\nfunction inspect(a) {return Object.getOwnPropertyNames(a)}\n// something else?\n//var serverProcess = cp.spawn(\"node\",[\"vscode_lsp.js\"])\nvar serverProcess = cp.spawn(\"bash-language-server\",[\"start\"])\n//var serverProcess = cp.spawn(\"bash\")// this shit does not properly respond to us.\nconst { StringDecoder } = require('string_decoder');\nconst decoder = new StringDecoder('utf8');\nfunction dc(a){return decoder.write(a)}\n//(type, ...args) <- way to hide these things.\nserverProcess.stderr.on(\"data\",d=>{log(\"STDERR\\n\"+dc(d))})\nserverProcess.stdout.on(\"data\",d=>{log(\"STDOUT\\n\"+dc(d))})\n// this is buffer, decode it first.\n// does this really matter? can we write into the stdin?\n// no don't you think about this.\nvar client = {reader:new node_1.StreamMessageReader(serverProcess.stdout)\n,writer:new node_1.StreamMessageWriter(serverProcess.stdin)}"
        },
        {
            "comment": "The code sets up a connection for communication between two components and defines a request type named 'testNotification'. It listens for events, but the specific event is not defined yet. It also includes commented lines to send a request with the message \"Hello World\" every second and another comment suggesting to require a protocol for handling shutdown requests. The code then logs a message stating \"made it?\" and defines functions to convert text document identifiers, worker positions, and completion trigger kinds into their respective protocol types.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/cognitionService/virtual/vscode_ipc2.js\":25-49",
            "content": "let conn = node_1.createMessageConnection(client.reader,client.writer)\nlet note = new node_1.RequestType('testNotification');\n//let note = new node_1.NotificationType('testNotification');\nconn.listen()\n//setInterval(()=>{conn.sendRequest(\"Hello World\")},1000)\n//setInterval(()=>{conn.sendRequest(note,\"Hello World\")},1000)\nlog(\"made it?\")\n//dir(node_1.createMessageConnection)\nuri = \"file:///Users/dirkb/sample/test.ts\"\ntd = \"textDocument/didOpen\"\ndir(conn)\n// method, params?\nconst proto = require(\"vscode-languageserver-protocol\");\n//log(proto.ShutdownRequest.type)\n//let meta = code2ProtocolConverter.asCompletionParams(document, position, context)\nfunction asTextDocumentIdentifier(textDocument) { return { uri: _uriConverter(textDocument.uri) };}\nfunction asWorkerPosition(position) { return { line: position.line, character: position.character };}\nfunction asCompletionTriggerKind(triggerKind) { switch (triggerKind) {\n\tcase 0: return proto.CompletionTriggerKind.TriggerCharacter;  \n\tcase 1:return proto.CompletionTriggerKind.TriggerForIncompleteCompletions;"
        },
        {
            "comment": "This code is initializing a text document and sending a completion request to a language server. It handles different triggers, sets the file URI, position, and context for the request. The code also handles potential errors and uses JSON-RPC protocol for communication.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/cognitionService/virtual/vscode_ipc2.js\":50-74",
            "content": "\tdefault:return proto.CompletionTriggerKind.Invoked; } }\nlet position={line:0,character:0}\nlet fileuri=\"file:///sdcard/lazero/flutter/html/baidu_html-1598791515.html\";\n//asTextDocumentIdentifier(textDocument)\n//do not have the document yet. get it parsed.\nlet meta={\n\ttextDocument: {uri:fileuri},\n\tposition: asWorkerPosition(position),\n\tcontext:{\n\t\ttriggerKind: asCompletionTriggerKind(),\n\t\ttriggerCharacter: \" \"}\n}\nlet token=undefined\n//uri2TextDocument\n// this is shutdown.\n// wtf is the token?\n// use client/browser in place of node?\n//conn.sendRequest(proto.CompletionRequest.type, meta,token).then(()=>{log(\"SUCCESS\")}).catch(()=>{log(\"FAILED\")})\ndir(proto)\nlog(proto.InitializeRequest.type)\n//{\"jsonrpc\":\"2.0\",\"id\":0,\"error\":{\"code\":-32603,\"message\":\"Request initialize failed with message: Cannot read property 'workspace' of undefined\"}}\n// bash-language-server/node_modules/vscode-jsonrpc/lib/common/connection.js -> ~400\n//let init={workspace:\"file:///sdcard/lazero/flutter/html/\"}\nlet init={rootPath:\"file:///\",capabilities:[]}"
        },
        {
            "comment": "This code is responsible for initializing a connection and sending various requests to the server. It starts by initializing an object with the workspace directory and capabilities, then sends an InitializeRequest. If successful, it proceeds to send a WorkspaceSymbolRequest with an optional workDoneToken. Finally, it logs the status of each request - either \"SUCCESS\" or \"FAILED\".",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/native/lazero_kali_amd64/cognitionService/virtual/vscode_ipc2.js\":75-91",
            "content": "//let init={}\n//let init={workspace:\"file:///sdcard/lazero/flutter/html/\",capabilities:[]}\ndir(proto)\nconn.sendRequest(proto.InitializeRequest.type, init).then(()=>{log(\"SUCCESS\");\nlet WSR=proto.WorkspaceSymbolRequest.type\nlog(WSR)\n\t//progress.attachWorkDone\nconn.sendRequest(WSR,{workDoneToken:undefined}).then(()=>{log(\"SUCCESS\")}).catch(()=>{log(\"FAILED\")})\n}).catch(()=>{log(\"FAILED\")})\n//conn.sendRequest(proto.CompletionRequest.type, meta,token).then(()=>{log(\"COMP SUCCESS\")}).catch(()=>{log(\"FAILED\")});\n//conn.sendRequest(proto.ShutdownRequest.type, undefined).then(()=>{log(\"SUCCESS\")}).catch(()=>{log(\"FAILED\")})\n//conn.sendRequest({method:itd,params:[uri]}).then(()=>{}).catch(()=>{})\n// there must be errors.\n// can i send some shits?"
        }
    ]
}