{
    "summary": "The code captures screenshots and touch/mouse events, sending data to a server using Fetch API. It updates cursor positions and handles click, double-click, mouseup, and keyboard events via POST requests, but may contain outdated functionality or warnings due to deprecated index file.",
    "details": [
        {
            "comment": "This code sets up a function to continuously capture screenshots and post them, with a 10-second refresh rate. It also defines variables for storing cursor data and handles touch events. The screenshot function waits for the image to load before drawing it onto the canvas and then schedules the next screen capture after a delay. It posts the captured screenshot data to a server using Fetch API with JSON payload, logging the response to the console.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":1-36",
            "content": "const refreshRate=10;\nvar sleepTime = 1000/refreshRate;\n// first let's get the screenshots.\nfunction test_screen()\n{\n\tconsole.log(\"screen refreshing!\");\n\tvar screen = document.getElementById(\"screenCanvas\");\n\t// wait till ready?\n\tvar ctx = screen.getContext(\"2d\");\t\t\t\t\n\tvar image = new Image();\n\timage.src=\"/screenshot/\"+Date.now()+\".jpg\";\n\timage.onload = function(){\n\t\tctx.drawImage(image,0,0);\n\t\tdelete image;\n\t\tsetTimeout(()=>{test_screen()},sleepTime);\t\t\t\t\t\n\t}\n}\nwindow.addEventListener(\"load\",test_screen);\nfunction postData(suffix,payload){\n\t//get base location first.\n\tvar remoteHost = window.location.href;\n\tvar options = {method:\"POST\",\n\t\tbody: JSON.stringify(payload),\n\t\theaders: {\"Content-Type\": \"application/json\"}\n\t};\n\tfetch(remoteHost+suffix, options).then(res => res.json()).then(res => console.log(\"post response:\\n\"+res)); \n}\n// check some buffers. regularly clear things? nope?\nvar global_previousCursor = {};\nvar global_nextCursor = {};\nvar keyevent = {};\nfunction touchDown(previousCursor,nextCursor){\n\tvar a = previousCursor;"
        },
        {
            "comment": "This code snippet is responsible for handling touch and mouse events. If a \"touchstart\" event occurs followed by a \"mousemove\" event within certain conditions, it triggers a \"mouseDown\" event and posts data to \"/mouse\". The \"touchMove\" function handles \"touchstart\" or \"touchmove\" events, sending a \"mouseMove\" event with deltaX and deltaY coordinates. Finally, the \"touchUp\" function handles \"touchend\" or \"touchstart\" followed by \"mousemove\" or empty previous state, triggering a \"mouseUp\" event and posting data to \"/mouse\".",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":37-62",
            "content": "\tvar b = nextCursor;\n\tif (a.type == \"touchstart\" && b.type == \"mousemove\"){\n\t\tif (Math.abs(a.clientX - b.x) <5 && Math.abs(a.clientY - b.Y)< 5 && Math.abs(a.timeStamp - b.timeStamp) < 2500){\n\t\t\t// trigger hold event? shall I? mouse down?\n\t\t\tpostData(\"/mouse\",{type:\"mouseDown\"});\t\n\t\t\treturn false;\n\t\t}\t\t\t\t\t}\n\treturn true;\n}\nfunction touchMove(previousCursor,nextCursor){var a = previousCursor;\n\tvar b = nextCursor;\n\tif ((a.type == \"touchstart\" || a.type == \"touchmove\") && b.type == \"touchmove\"){\n\t\tvar deltaX = b.clientX - a.clientX;\n\t\tvar deltaY = b.clientY - a.clientY;\n\t\tpostData(\"/mouse\",{type:\"mouseMove\",deltaX:deltaX,deltaY:deltaY});\n\t}\n}\nfunction touchUp(previousCursor,nextCursor){\n\tvar b = previousCursor;\n\tvar a = nextCursor;\n\tif ((a.type == \"touchstart\" || a.type == \"touchend\") && ( b == {} || b.type == \"mousemove\" || b.type == \"touchmove\")){\n\t\t//\tif (Math.abs(a.clientX - b.x) <5000 && Math.abs(a.clientY - b.Y)< 5000){\n\t\t// trigger hold event? shall I? mouse down?\n\t\tpostData(\"/mouse\",{type:\"mouseUp\"});\t\t\t\t\t//\t\t\t\t\t\t\t\t\t\t}\t\t\t\t\t}"
        },
        {
            "comment": "This code defines two functions, `click` and `dblclick`, which handle click and double-click events respectively. The functions check if the event was fired with the alt key pressed, and if not, they consider it as a left click or double-click event. The functions then send a POST request to \"/mouse\" with the event details.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":63-90",
            "content": "\t}\n}\nfunction click(previousCursor,nextCursor){\n\t// if not fired with alt key we use it as left click.\n\tvar a = nextCursor;\n\tvar b = previousCursor;\n\tif (a.type == \"click\" && (b.type == \"mouseup\" || b.type == \"touchend\" || b.type == \"touchstart\") && Math.abs(a.timeStamp - b.timeStamp) < 2500){\n\t\tvar altKey = a.altKey;\n\t\tvar button = \"left\";\n\t\tif (altKey){button = \"right\";}\n\t\tpostData(\"/mouse\",{type:\"click\",button:button});\n\t}\n}\nfunction dblclick(previousCursor,nextCursor){\n\t// if not fired with alt key we use it as left click.\n\tvar a = nextCursor;\n\tif (a.type == \"click\" && (b.type == \"mouseup\" || b.type == \"touchend\" || b.type == \"touchstart\") && Math.abs(a.timeStamp - b.timeStamp) < 2500){\n\t\tvar altKey = a.altKey;\n\t\tvar button = \"left\";\n\t\tif (altKey){button = \"right\";}\n\t\tpostData(\"/mouse\",{type:\"doubleClick\",button:button});\n\t}\n}\ndocument.addEventListener(\"touchstart\",(e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\ttouchUp(global_previousCursor,global_nextCursor);"
        },
        {
            "comment": "This code adds event listeners for touchmove, touchend, click, and mousemove events. It updates the cursor position, sets timestamp, and calls corresponding functions. For mousedown, it sends a \"mouseDown\" request to \"/mouse\".",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":91-118",
            "content": "});\ndocument.addEventListener(\"touchmove\",(e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\ttouchMove(global_previousCursor,global_nextCursor);\n});\ndocument.addEventListener(\"touchend\",(e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\ttouchUp(global_previousCursor,global_nextCursor);\n});\ndocument.addEventListener(\"click\",(e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\tclick(global_previousCursor,global_nextCursor);\n});\ndocument.addEventListener(\"mousemove\",(e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\tif(touchDown(global_previousCursor,global_nextCursor)){\n\t\tpostData(\"/mouse\",{type:\"mouseMove\",deltaX:e.movementX,deltaY:movementY});\n\t}\n});\ndocument.addEventListener(\"mousedown\", (e) => {global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\tpostData(\"/mouse\",{type:\"mouseDown\"});"
        },
        {
            "comment": "This code adds event listeners for mouseup and double click events on the document. It updates global variables to keep track of previous and next cursor positions. When a mouseup or double click event occurs, it sends a POST request with the corresponding event type to \"/mouse\" endpoint. The main_translate_table_key dictionary maps keyboard keys to their respective characters.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":119-133",
            "content": "}\n);\ndocument.addEventListener(\"mouseup\", (e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\tpostData(\"/mouse\",{type:\"mouseUp\"});\n}\n);\ndocument.addEventListener(\"dblclick\", (e)=>{global_previousCursor = global_nextCursor;\n\te.timeStamp = Date.now();\n\tglobal_nextCursor = e;\n\tdblclick(global_previousCursor, global_nextCursor);\n}\n);\nconst main_translate_table_key = {'a': 'a', 'b': 'b', 'c': 'c', 'd': 'd', 'e': 'e', 'f': 'f', 'g': 'g', 'h': 'h', 'i': 'i', 'j': 'j', 'k': 'k', 'l': 'l', 'm': 'm', 'n': 'n', 'o': 'o', 'p': 'p', 'q': 'q', 'r': 'r', 's': 's', 't': 't', 'u': 'u', 'v': 'v', 'w': 'w', 'x': 'x', 'y': 'y', 'z': 'z', 'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f', 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M': 'm', 'N': 'n', 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S': 's', 'T': 't', 'U': 'u', 'V': 'v', 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z', '~': '~', '`': '`', '!': '!', '@': '@', '#': '#', '$': '$', '%': '%', '^': '^',"
        },
        {
            "comment": "The code defines a translation table for various keyboard keys and their respective characters, and also includes modifier keys with their short names. The function translate_filter takes a key as input and retrieves the corresponding key name from the translation table.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":133-137",
            "content": " '&': '&', '*': '*', '(': '(', ')': ')', '-': '-', '_': '_', '+': '+', '=': '=', '{': '{', '}': '}', '[': '[', ']': ']', '|': '|', '\\\\': '\\\\', ':': ':', ';': ';', '\"': '\"', \"'\": \"'\", '<': '<', ',': ',', '>': '>', '.': '.', '?': '?', '/': '/', '0': '0', '1': '1', '2': '2', '3': '3', '4': '4', '5': '5', '6': '6', '7': '7', '8': '8', '9': '9', 'Tab': 'tab', 'Enter': 'enter', 'Escape': 'escape', 'ArrowUp': 'up', 'ArrowDown': 'down', 'ArrowLeft': 'left', 'ArrowRight': 'right', 'PageUp': 'pageup', 'PageDown': 'pagedown', 'Home': 'home', 'End': 'end', 'Backspace': 'backspace', 'Delete': 'delete', ' ': 'space'};\nconst modifier_translate_table_code = {'Alt': 'alt', 'Ctrl': 'ctrl', 'Shift': 'shift', 'Meta': 'meta', 'MetaLeft': 'metaleft', 'MetaRight': 'metaright', 'ShiftLeft': 'shiftleft', 'ShiftRight': 'shiftright', 'AltLeft': 'altleft', 'AltRight': 'altright', 'CtrlLeft': 'ctrlleft', 'CtrlRight': 'ctrlright'};\nconst modifier_keys = [\"Alt\",\"Meta\",\"Shift\",\"Ctrl\"];\nfunction translate_filter(key){\n\tvar keyname = key.key;"
        },
        {
            "comment": "The code is setting up event listeners for keydown, press, and keyup events on the document. When a key is pressed, it calls the `translate` function to check if the key is in the translate table or a modifier key. If it is a valid key, it sends a POST request with the key data to \"/keyboard\". If the key is unknown or a modifier key, it logs an error message.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":138-183",
            "content": "\tvar keycode = key.code;\n\tif((Object.getOwnPropertyNames(main_translate_table_key).indexOf(keyname)!=-1) || (modifier_keys.indexOf(keyname)!=-1)){\n\t\treturn true;\n\t}\n\tconsole.log(\"unknown key:\\n\"+\"keycode:\"+keycode+\"\\n+keyname:\"+keyname)\n\treturn false;\n}\nfunction modifier(key){\n\tvar keyname = key.key;\n\tif (modifier_keys.indexOf(keyname)!=-1){\n\t\treturn true;\n\t}\n\treturn false;\n}\nfunction translate(key){\n\tvar keycode = key.code;\n\tvar keyname = key.key;\n\tif (translate_filter(key)){\n\t\tif (modifier(key)){\n\t\t\treturn modifier_translate_table_code[keycode];\n\t\t\t// has residual work on metakeys.\n\t\t}\n\t\treturn translate_table_key[keyname];\n\t}\n\treturn false;\n}\n// prepare the translate table.\ndocument.addEventListener(\"keydown\", (e) =>{\n\te.timeStamp = Date.now();\n\tkeyevent = e;\n\tvar target = translate(e);\n\tif (target){\n\t\tpostData(\"/keyboard\",{type:\"keyDown\",key:target})\n\t}\n}\n);\ndocument.addEventListener(\"press\", (e) =>{\n\te.timeStamp = Date.now();\n\tkeyevent = e;//just ignore this shit?\n});\ndocument.addEventListener(\"keyup\",(e) =>{\n\te.timeStamp = Date.now();"
        },
        {
            "comment": "The code defines two functions, `reset_keyboard` and `reset_mouse`, which periodically check the time difference between the most recent event and a predefined reset interval. If the interval is exceeded, a reset event is sent via a POST request to \"/keyboard\" and \"/mouse\", respectively. The code also includes functions `clearText` and `focusText` that clear and refocus a hidden text area element on the webpage, respectively. The `onLoad` function adds a \"load\" event listener to trigger the `clearText` function on page load.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":184-225",
            "content": "\tkeyevent = e;\n\tvar target = translate(e);\n\tpostData(\"/keyboard\",{type:\"keyUp\",key:target});\n});\n//execute some idle cleaning jobs.\nconst keyboardReset = 2000;\nconst mouseReset = 1000;\nfunction reset_keyboard(){\n\tvar now = Date.now();\n\tvar previous = keyevent.timeStamp;\n\tif( now-previous > keyboardReset){\n\t\tpostData(\"/keyboard\",{type:\"reset\"});\n\t};\n\tsetTimeout(()=>{reset_keyboard()},keyboardReset);\n}\t\nfunction reset_mouse(){\n\tvar now = Date.now();\n\tvar previous = nextCursor.timeStamp;\n\tif( now-previous > mouseReset){\n\t\tpostData(\"/mouse\",{type:\"reset\"});\n\t}\n\tsetTimeout(()=>{reset_mouse()}, mouseReset);\n}\t\n// reset all events when idle, in client and server side.\nfunction clearText(){\n\tvar textarea = document.getElementById(\"hiddenInput\");\n\ttextarea.value=\"\"\n\tsetTimeout(()=>{clearText()},500);\n}\nfunction focusText(){\n\tvar textarea = document.getElementById(\"hiddenInput\");\n\ttextarea.focus();\n\tsetTimeout(()=>{focusText()},200);\n}\nfunction onLoad(lambda){window.addEventListener(\"load\",lambda);}\nonLoad(clearText);\n/*      function probeText(){var textarea = document.getElementById(\"hiddenInput\");"
        },
        {
            "comment": "The code logs the value of the textarea, then calls onLoad functions for focusText, reset_keyboard, and reset_mouse. It seems to be related to a deprecated index file and may contain outdated functionality or warnings about automatic reload or dialogs.",
            "location": "\"/media/root/Prima/works/generated_docs/metalazero_doc/src/remote_control/server/deprecated_index.js\":226-232",
            "content": "\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"text: \"+textarea.value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t*/\nonLoad(focusText);\nonLoad(reset_keyboard);\nonLoad(reset_mouse);\n//automatic reload? dialog?"
        }
    ]
}